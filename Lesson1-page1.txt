Page: https://docs.zkasino.io/developer Contract addresses | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBook Page: https://docs.zkasino.io/developer/architecture#notes Architecture | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageTransaction 1: Wager and VRF requestTransaction 2: VRF callback and payoutDeveloperArchitecturePreviousVRF OracleNextMetaplayLast updated 1 year agoThe technical flow on the platform for the player using Chainlink-integrated chains (ZKasino uses the Subscription method) happens in two transaction and goes as follows:Transaction 1: Wager and VRF requestThe first transaction consists of placing the wager, paying the VRF fee, receiving a VRF refund and initiating the VRF request:WagerA player calls the Game_Play function on any Game Contract and places a wager. The wager (bet token) is transferred to the Game Contract.VRF feeAn estimation of the VRF fee is charged upfront in the native token for regular play.VRF refundIn the same transaction a partial refund of the VRF fee is sent to the player when the player has initially overpaid for the VRF cost.Randomizer allows an extra refund the next time you play on the same contract if the cost of the callback was superior to the cost estimation.VRF requestThe VRF fee is transferred to the Game Contract (or to the Randomizer VRF contract) and the Game Contract (consumer) calls the requestRandomWords function on the VRFCoordinator contract. The VRFCoordinator emits an event to indicate that a VRF callback should be made.Transaction 2: VRF callback and payoutThe Chainlink node listens to the request randomness events from the VRFCoordinator, generates randomness by mixing the private key with the blockhash of the request and calls the fulfillRandomWords (callback VRF function) on the VRFCoordinator. If there are multiple pending requests the BatchVRFCoordinator is called instead with multiple fulfilments and forwards those to the VRFCoordinator. The Chainlink node waits for requestConfirmations (number in blocks) before responding. ZKasino has set the number of blocks at 3 for Polygon and 1 for Arbitrum.The VRFCoordinator calls the rawFulfillRandomWords on the Game contract.The Game Contract determines the outcome and transfers the wager to the Diamond Contract (bankroll).When the player draws or wins, the bankroll sends the payout to the player at the same time. When the player loses, there is no payout and the bankroll keeps the wager. NotesThe infrastructure is non-custodial. Player's funds are never at risk. If the VRF request fails or if the bankroll can't payout, the transaction either reverts or the wager gets stuck in the Game Contract. The player can then remove their bet with the refund function at Pending VRF Requests on their profile page. While there is a refund mechanism, it is not possible to frontrun transactions for illicit gain. For example, one could try scanning the mempool for losses, frontrunning those transactions to refund them and then only keeping wins. However, this is not possible. On Polygon it is not possible, because refunds only become available when the VRF callback has already become invalid. Furthermore, Arbitrum does not have a mempool.For more information on the Chainlink VRF, read the Chainlink docs: https://docs.chain.link/vrf/v2/subscription. Chainlink's VRF contracts can be found here: https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.8/vrf. Architecture diagram Page: https://docs.zkasino.io/zkasino/roadmap-and-faq#governance Roadmap and FAQ | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageBankroll PoolsNetwork ExpansionGasless BetsPlay-to-Earn (P2E)Permissionless bankrollsSubsidised VRF feeGaming Software ProvidersProtocol UpdatesCasino GamesPvP GamesTokenomicsGovernanceFuture Partnerships and IntegrationsTeamZKasinoRoadmap and FAQBankroll PoolsIn a future update, the bankroll will be decentralised through bankroll pools. Anyone will be able to provide liquidity to available bankrolls. Underlying liquidity providers will receive a share of revenue parallel to the bankroll increasing in size.Network ExpansionSince ZKasino focuses on ZK Rollups, its aim is to go live zkSync Era when a VRF becomes available. ZKasino can be expected to go live on StarkNet and Polygon zkEVM as well.Gasless BetsZKasino wants to offer the user the best and cheapest experience. Gasless transactions and thus gasless placing of bets are now possible through Metaplay. We will keep you posted when gasless bets become available.Play-to-Earn (P2E)Once ZKasino's token is live, ZKasino will offer Play-to-Earn (P2E) gaming where betting will grant you ZKasino tokens.Permissionless bankrollsIn the future LPs will be able to permissionlessly create own bankrolls for ERC-20s of their choice and deposit liquidity into these non-custodial pools. This allows any ERC-20 to be a bankroll token (except deflationary tokens).Subsidised VRF feeGenerating randomness involves costs, so VRFs charge a fee for RNG requests. ZKasino aims to subsidise these VRF costs from the user's perspective, so the only thing a player has to worry about is the size of their bet.Gaming Software ProvidersCurrently, ZKasino is using its own software for the games. All code is written by ZKasino, contracts and frontend. In the future, gaming software providers could get integrated into ZKasino when software providers launch on the blockchain.Protocol UpdatesGeneral updates to the protocol planned for the future:Analytics dashboardReferral systemBonusesMore languagesMore soundsImprove graphics and add 3D graphicsChat boxSports bettingPrediction gamesCasino GamesAdd more casino games in the future:LotteryRouletteBlackjackBaccaratCrashDifferent slotsMulti-hand Jacks or BetterPvP GamesAdd PvP games in the future:Rock Paper ScissorsDiceTokenomicsA token is on the roadmap. More information will be provided in the future.GovernanceA DAO is on the roadmap. More information will be provided in the future.Future Partnerships and IntegrationsZKasino has already integrated two VRF projects, Chainlink and Randomizer. ZKasino also has a partnership with MatchboxDAO. In the future there will be more integrations, such as bridges, and more partnerships.TeamBy ZigZag Labs.PreviousZKasino Chain TestnetNextResponsible GamingLast updated 1 year ago Page: https://docs.zkasino.io/technical/architecture Architecture | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBook Page: https://docs.zkasino.io/developer/architecture Architecture | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageTransaction 1: Wager and VRF requestTransaction 2: VRF callback and payoutDeveloperArchitecturePreviousVRF OracleNextMetaplayLast updated 1 year agoThe technical flow on the platform for the player using Chainlink-integrated chains (ZKasino uses the Subscription method) happens in two transaction and goes as follows:Transaction 1: Wager and VRF requestThe first transaction consists of placing the wager, paying the VRF fee, receiving a VRF refund and initiating the VRF request:WagerA player calls the Game_Play function on any Game Contract and places a wager. The wager (bet token) is transferred to the Game Contract.VRF feeAn estimation of the VRF fee is charged upfront in the native token for regular play.VRF refundIn the same transaction a partial refund of the VRF fee is sent to the player when the player has initially overpaid for the VRF cost.Randomizer allows an extra refund the next time you play on the same contract if the cost of the callback was superior to the cost estimation.VRF requestThe VRF fee is transferred to the Game Contract (or to the Randomizer VRF contract) and the Game Contract (consumer) calls the requestRandomWords function on the VRFCoordinator contract. The VRFCoordinator emits an event to indicate that a VRF callback should be made.Transaction 2: VRF callback and payoutThe Chainlink node listens to the request randomness events from the VRFCoordinator, generates randomness by mixing the private key with the blockhash of the request and calls the fulfillRandomWords (callback VRF function) on the VRFCoordinator. If there are multiple pending requests the BatchVRFCoordinator is called instead with multiple fulfilments and forwards those to the VRFCoordinator. The Chainlink node waits for requestConfirmations (number in blocks) before responding. ZKasino has set the number of blocks at 3 for Polygon and 1 for Arbitrum.The VRFCoordinator calls the rawFulfillRandomWords on the Game contract.The Game Contract determines the outcome and transfers the wager to the Diamond Contract (bankroll).When the player draws or wins, the bankroll sends the payout to the player at the same time. When the player loses, there is no payout and the bankroll keeps the wager. NotesThe infrastructure is non-custodial. Player's funds are never at risk. If the VRF request fails or if the bankroll can't payout, the transaction either reverts or the wager gets stuck in the Game Contract. The player can then remove their bet with the refund function at Pending VRF Requests on their profile page. While there is a refund mechanism, it is not possible to frontrun transactions for illicit gain. For example, one could try scanning the mempool for losses, frontrunning those transactions to refund them and then only keeping wins. However, this is not possible. On Polygon it is not possible, because refunds only become available when the VRF callback has already become invalid. Furthermore, Arbitrum does not have a mempool.For more information on the Chainlink VRF, read the Chainlink docs: https://docs.chain.link/vrf/v2/subscription. Chainlink's VRF contracts can be found here: https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.8/vrf. Architecture diagram Page: https://docs.zkasino.io/developer/infrastructure#vrfs Infrastructure | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageBankrollImmutable Game ContractsAccess ControlsDeveloperInfrastructureBankrollZKasino uses one bankroll on each chain: the Diamond Contract. The Diamond Contract follows the diamond upgrade pattern described in EIP-2535: Diamonds, Multi-Facet Proxy. The Diamond Contract holds the bankroll funds and handles the transactions and payouts to the players. The bankroll listens to the immutable BankrollFacet Contract to know how to execute transactions. All Game Contracts communicate separately with the bankroll contract. These diamond contracts made by Nick Mudge have been used. Also OpenZeppelin's ERC-20 standard is used and their Reentrancy Guard.For more information on how the contracts work with each other, visit the Architecture page. To see a list of all clearly labelled contracts, visit the Contracts page.In a future update, the bankroll will be decentralised through bankroll pools. Liquidity providers will receive their share in revenue equal to the increase of the bankroll.Immutable Game ContractsThe Game Contracts can't be upgraded and are thus immutable.Plinko and MinesThe game contracts Plinko and Mines have a multiplier function, but these do not affect immutability or centralisation. An explanation:The function Plinko.setPlinkoMultipliers() is needed because it is not possible to set all the Plinko multipliers at once. This exceeds the gas limit, because a lot of data goes into setting the multpliers. Most importantly, the function can't be re-used once the multipliers are set. The function can only be invoked once.The function Mines.Mines_SetMultipliers() has no input, it is only math. Therefore, the team also considers Mines not to be affected by centralization.Access ControlsThe owner of the Diamond Contract (bankroll) is a MultiSig. In the early phase the signers consist of ZKasino team members. The MultiSig-owner can call a few function on the bankroll:withdrawNativeFunds and withdrawFunds: withdraw tokens from the bankroll;CertiK's audit: Notes: It should be observed that players' bets are not moved to the BankrollFacet contract until the games have concluded. Therefore the bets are not directly impacted by the specialized functions mentioned above.setGame: give game contracts access to the bankroll or remove access;setTokenAddress: add token contracts to the bankroll to perform wagers in or remove tokens contracts.There is no timelock since it is vital to act quickly and to be able remove games from the bankroll or withdraw funds in the early stage. Player's wagers are never at risk (see the Architecture page). Furthermore, every Game Contract has a function that the MultiSig-owner can invoke to withdraw VRF fees:transferFees: withdraw VRF fees paid by players in native token from Game Contracts to the bankroll.Additionally, a diamond proxy is utilized to upgrade the bankroll contract. This allows the contract owner to utilize the diamondCut() function to add, replace, or remove functions.MultiSigTypeChainAddressMultiSig 2/3 (owner)Polygon Arbitrum0x2f52AaC7cD0F8a83C15eE933F0b9c00F6A5A2f95 0xF0275f92bc1C69d2B7aF3eA9116e9174374cb479MultiSig signersPolygon Arbitrum 0x62c4d57a469A21c0D1A5F39362195538174535E8 0x8cCf7C95C0C8EE89d3662b315bAfEc929464dee7 0xbbeB869bDe515b330b65f067AAef845D8c559CC5 0x62c4d57a469A21c0D1A5F39362195538174535E8 0x8cCf7C95C0C8EE89d3662b315bAfEc929464dee7 0xbbeB869bDe515b330b65f067AAef845D8c559CC5MultiSig signers follow these policies:All signers must use one of the following desktop wallets (Metamask, WalletConnect, etc)All signers must use an approved browser (Brave, Firefox, etc)All transactions must occur on a dedicated browser instance (rather than a dedicated computer).An approved VPN should be used for all transactions.Committed in writing that the backup of keys are in multiple locations and protected from fire and floodAll signers on all access control addresses must sign a transaction at least once every 3 months. This can be an active transaction or a test transaction.All access control transactions must be executed in a controlled space for example home or office. They should not be signed in public spaces such as coffee shops or airport terminals.PreviousAuditsNextVRF OracleLast updated 1 year ago Page: https://docs.zkasino.io/developer/infrastructure#bankroll Infrastructure | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageBankrollImmutable Game ContractsAccess ControlsDeveloperInfrastructureBankrollZKasino uses one bankroll on each chain: the Diamond Contract. The Diamond Contract follows the diamond upgrade pattern described in EIP-2535: Diamonds, Multi-Facet Proxy. The Diamond Contract holds the bankroll funds and handles the transactions and payouts to the players. The bankroll listens to the immutable BankrollFacet Contract to know how to execute transactions. All Game Contracts communicate separately with the bankroll contract. These diamond contracts made by Nick Mudge have been used. Also OpenZeppelin's ERC-20 standard is used and their Reentrancy Guard.For more information on how the contracts work with each other, visit the Architecture page. To see a list of all clearly labelled contracts, visit the Contracts page.In a future update, the bankroll will be decentralised through bankroll pools. Liquidity providers will receive their share in revenue equal to the increase of the bankroll.Immutable Game ContractsThe Game Contracts can't be upgraded and are thus immutable.Plinko and MinesThe game contracts Plinko and Mines have a multiplier function, but these do not affect immutability or centralisation. An explanation:The function Plinko.setPlinkoMultipliers() is needed because it is not possible to set all the Plinko multipliers at once. This exceeds the gas limit, because a lot of data goes into setting the multpliers. Most importantly, the function can't be re-used once the multipliers are set. The function can only be invoked once.The function Mines.Mines_SetMultipliers() has no input, it is only math. Therefore, the team also considers Mines not to be affected by centralization.Access ControlsThe owner of the Diamond Contract (bankroll) is a MultiSig. In the early phase the signers consist of ZKasino team members. The MultiSig-owner can call a few function on the bankroll:withdrawNativeFunds and withdrawFunds: withdraw tokens from the bankroll;CertiK's audit: Notes: It should be observed that players' bets are not moved to the BankrollFacet contract until the games have concluded. Therefore the bets are not directly impacted by the specialized functions mentioned above.setGame: give game contracts access to the bankroll or remove access;setTokenAddress: add token contracts to the bankroll to perform wagers in or remove tokens contracts.There is no timelock since it is vital to act quickly and to be able remove games from the bankroll or withdraw funds in the early stage. Player's wagers are never at risk (see the Architecture page). Furthermore, every Game Contract has a function that the MultiSig-owner can invoke to withdraw VRF fees:transferFees: withdraw VRF fees paid by players in native token from Game Contracts to the bankroll.Additionally, a diamond proxy is utilized to upgrade the bankroll contract. This allows the contract owner to utilize the diamondCut() function to add, replace, or remove functions.MultiSigTypeChainAddressMultiSig 2/3 (owner)Polygon Arbitrum0x2f52AaC7cD0F8a83C15eE933F0b9c00F6A5A2f95 0xF0275f92bc1C69d2B7aF3eA9116e9174374cb479MultiSig signersPolygon Arbitrum 0x62c4d57a469A21c0D1A5F39362195538174535E8 0x8cCf7C95C0C8EE89d3662b315bAfEc929464dee7 0xbbeB869bDe515b330b65f067AAef845D8c559CC5 0x62c4d57a469A21c0D1A5F39362195538174535E8 0x8cCf7C95C0C8EE89d3662b315bAfEc929464dee7 0xbbeB869bDe515b330b65f067AAef845D8c559CC5MultiSig signers follow these policies:All signers must use one of the following desktop wallets (Metamask, WalletConnect, etc)All signers must use an approved browser (Brave, Firefox, etc)All transactions must occur on a dedicated browser instance (rather than a dedicated computer).An approved VPN should be used for all transactions.Committed in writing that the backup of keys are in multiple locations and protected from fire and floodAll signers on all access control addresses must sign a transaction at least once every 3 months. This can be an active transaction or a test transaction.All access control transactions must be executed in a controlled space for example home or office. They should not be signed in public spaces such as coffee shops or airport terminals.PreviousAuditsNextVRF OracleLast updated 1 year ago Page: https://docs.zkasino.io/zkasino Roadmap and FAQ | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBook Page: https://docs.zkasino.io/zkasino/live-support Live Support | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageZKasinoLive SupportJoin the Telegram server if you want quick answers to your questions or if you want to get in touch with live support.PreviousResponsible GamingNextIPFS hostingLast updated 1 year ago Page: https://docs.zkasino.io/zkasino/official-links#contact Official Links | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0