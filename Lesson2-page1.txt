Page: https://docs.zkasino.io/developer/changelog/testnet-guide-outdated#minting-zkusd Testnet Guide (outdated) | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageTestnet ChainsFaucetsMinting ZKUSDDeveloperChangelogTestnet Guide (outdated)Visit the dApp, choose a game and click on the big question mark (?) next to the game's name to understand how the game works.Testnet ChainsZKasino is currently live on 5 different testnets: zkSync 2.0 testnet, Arbitrum Goerli (testnet), Mumbai (Polygon testnet), Fantom Testnet, BNB Chain testnet.FaucetsZKasino has built gas faucets for every chain it's live on. Simply head over to the dApp, choose your network and click the "Request & Tweet" button. Alternatively, you can use the official faucets (links provided on the dApp).Minting ZKUSDZKUSD can be minted for free to play with on testnet. ZKUSD has no value; it is only used on the ZKasino testnet chains.PreviousIntegrated VRFs (old)NextTestingLast updated 1 year ago Page: https://docs.zkasino.io/developer/testing/v2.0-private-testnet v2.0 private testnet | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageDeveloperTestingv2.0 private testnetFurther internal testing of games mainly for VRF and multi-betting.v2.0 Multi-chain Contracts for internal testingContractAddressDiamond (Main Contract)zkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2ZKUSD Token ContractzkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2DicezkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2MineszkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12 #13Mumbai (Polygon testnet) #1 #2 #3Fantom Testnet #1 #2 #5SlotszkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2Video PokerzkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2Coin FlipzkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2Rock Paper ScissorszkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2PlinkozkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2Rock Paper Scissors PvPzkSync 2.0 testnetArbitrum Goerli #12Mumbai (Polygon testnet) #3Fantom Testnet #3 #4BaccaratzkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2RoulettezkSync 2.0 testnet #1 #2 #3 #4 #5 #6Arbitrum Goerli #3 #4 #5 #6 #7 #8 #9 #10 #12Mumbai (Polygon testnet) #1 #2Fantom Testnet #1 #2BlackjackzkSync 2.0 testnet #1 #2Arbitrum Goerli #3 #4 #5Mumbai (Polygon testnet) #2Fantom Testnet #2Note: #number is times contracts have been (re-)deployed.Note 2: zkSync 2.0 contracts are not accessible on explorer anymore due to zkSync 2.0 regenesis.Previousv2.0 public testnetNextmulti-chain private mainnet with VRFLast updated 2 years ago Page: https://docs.zkasino.io/developer/testing/multi-chain-private-testnet-with-vrf#randomizer-previously-sorandom-results multi-chain private testnet with VRF | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageMulti-chain Test ContractsChainlink ResultsRandomizer (previously soRandom) ResultsDeveloperTestingmulti-chain private testnet with VRFPreviousv1.1 public testnetNextv1.0 public testnetLast updated 2 years agoTestnet testing for VRF's speed and cost.Multi-chain Test ContractsContractAddressDiamond Contract (Main Contract)Avalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliDiceAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliSlotsAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliCoin FlipAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliRock Paper ScissorsAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliPlinkoAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliVideo PokerAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliMinesAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliChainlink ResultsRandomizer (previously soRandom) ResultsNote: zkSync contracts are not accessible on explorer anymore due to zkSync 2.0 regenesis. Page: https://docs.zkasino.io/developer/testing/v2.0-public-testnet v2.0 public testnet | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageDeveloperTestingv2.0 public testnetv2.0 Multi-chain Testnet ContractsContractAddressDiamond Contract (Main contract, Bankroll, Upgradeable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetBankrollFacet Contract (Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetZKUSD Token ContractzkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetDice (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetMines (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetSlots (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetVideo Poker (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetCoin Flip (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetRock Paper Scissors (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetPlinko (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetPreviousv2.1 private testnet WIPNextv2.0 private testnetLast updated 2 years ago Page: https://docs.zkasino.io/zkasino-bridge#bridge-security ZKasino Bridge | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageOverviewBridge Timer SpecificsClaiming Your ZKASBridge SecurityZKasino BridgeInspired by innovative bridging mechanisms like that of Blast, ZKasino enables participants to earn ZKAS tokens before the chain goes live. This guide details everything you need to know about earning ZKAS by bridging ETH.https://bridge.zkasino.io/OverviewZKasino's bridge mechanism stands out by offering participants the chance to earn ZKAS tokens as they contribute to the ecosystem's liquidity. Drawing from the Blast model with a limited timer, this initiative not only facilitates the transition to the ZKasino network but also rewards early participants generously.Participants earn ZKAS tokens by bridging ETH from Ethereum mainnet to the ZKasino chain.Up to 25% of the ZKAS supply (2,222,222,222) is reserved for participants in the bridging process.For ETH bridged participants earn ZKAS continuously.Rewards are handed out to participants every second.When the timer runs out, the bridge closes and ETH contributions are halted.Participants still earn ZKAS every second after the bridge has closed until the ZKasino network goes live.Bridge Timer SpecificsThe bridge closes when the timer runs out and no more ETH contributions will be accepted, but ZKAS rewards are still being accumulated by participants.This limitation enhances the value of being an early participant and ensures a lower number of contributors, preserving the exclusivity and potential earnings for each participant.The bridge will be closed automatically after 30 days OR until the total intended supply of 2,222,222,222 ZKAS has run out.Claiming Your ZKASUpon the ZKasino chain launch, your ZKAS tokens will be instantly available in your wallet as ZKAS is the native gas token on the chain. Once you connect to the network, your tokens will appear in your wallet.This process is automatic, requiring no further action to claim your tokens.Important: Please refrain from clicking on any suspicious links for claiming ZKAS. The distribution process is automatic, requiring no additional steps on your part after bridging.Bridge SecuritySecurity is without question a top priority. Bridged ETH is stored in the secure Bridge contract (0x9144e18c28338516f0ace99bc88de34aae59be45) which is controlled by a 3/4 Multisig wallet (0x7911FeA7b36Fbd58a771bbf907aAd2ef4BDCC491) until the ZKasino network goes live.PreviousTokenomicsNextZKasino Chain TestnetLast updated 11 months ago Page: https://docs.zkasino.io/developer/testing/multi-chain-private-testnet-with-vrf multi-chain private testnet with VRF | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageMulti-chain Test ContractsChainlink ResultsRandomizer (previously soRandom) ResultsDeveloperTestingmulti-chain private testnet with VRFPreviousv1.1 public testnetNextv1.0 public testnetLast updated 2 years agoTestnet testing for VRF's speed and cost.Multi-chain Test ContractsContractAddressDiamond Contract (Main Contract)Avalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliDiceAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliSlotsAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliCoin FlipAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliRock Paper ScissorsAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliPlinkoAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliVideo PokerAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliMinesAvalanche Fuji, BSC Testnet, Fantom Testnet, Arbitrum GoerliChainlink ResultsRandomizer (previously soRandom) ResultsNote: zkSync contracts are not accessible on explorer anymore due to zkSync 2.0 regenesis. Page: https://docs.zkasino.io/developer/testing/v2.0-public-testnet#v2.0-multi-chain-testnet-contracts v2.0 public testnet | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageDeveloperTestingv2.0 public testnetv2.0 Multi-chain Testnet ContractsContractAddressDiamond Contract (Main contract, Bankroll, Upgradeable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetBankrollFacet Contract (Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetZKUSD Token ContractzkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetDice (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetMines (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetSlots (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetVideo Poker (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetCoin Flip (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetRock Paper Scissors (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetPlinko (Game, Immutable)zkSync 2.0 testnet, Arbitrum Goerli, Polygon Mumbai, Fantom TestnetPreviousv2.1 private testnet WIPNextv2.0 private testnetLast updated 2 years ago Page: https://docs.zkasino.io/developer/metaplay#malicious-intent-restricted Metaplay | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageTechnical flowSession wallet: frontend and trusted forwarderBackend (gas relayer)Trusted forwarder (contract)Game contracts (recipient)Forwarder extraArchitecture overviewFuture improvementsDeveloperMetaplayPreviousArchitectureNextProbability, Odds and House EdgeLast updated 1 year agoMetaplay© is a different way of betting besides regular play. Players can enable Metaplay in their settings. Metaplay© is technically speaking meta transactions combined with session keys. Session keys remove wallet pop ups, a most requested feature. This leads to confirmationless bets. Meta transactions achieve gas abstraction, so users can pay fees with the ERC-20 bet token they are wagering with.Below follows an explanation of the technical flow and architecture of Metaplay©.Technical flowSession wallet: frontend and trusted forwarderWhen a player wants to use Metaplay©, a session wallet is required. The frontend checks if a session private key is stored on localStorage. If a key exists, the frontend uses that key to access the session wallet. This session wallet is allowed to sign requests on behalf of the wallet that generated the session wallet (transaction signer). If a key does not exist yet, the frontend calls an ether.js function to generate a new, random session wallet with a session private key. Ethers guarantees that the key is generated randomly. That key is then stored in the user’s browser in localStorage. This allows the user to keep using Metaplay© across sessions and tabs. The user can delete the key from the browser's localStorage at any given moment:Next, the session wallet is set up on-chain on the Trusted Forwarder contract by calling the setSigner function (involves confirming a transaction). The session wallet address is enabled and saved in the Forwarder contract, the game contracts (‘targets’) are batch approved and an expiry time for the session wallet is set (one month). After one month the user needs to re-approve the Forwarder contract. During this month the user can revoke the allowances on the Forwarder contract for the session wallet at any time. The session wallet can be used for meta transactions based on ERC-2771. This achieves gas abstraction which means that native tokens are no longer required during betting. Fees are paid in ERC-20 bet tokens, such as USDC. Tokens with reliable pricefeeds are eligible to become Metaplay© bet tokens. The user needs to approve the bet tokens on the Forwarder contract (involves confirming a transaction). Note that Metaplay© is unavailable for native tokens (ETH, FTM, MATIC). Whenever a user clicks ‘Play’, the frontend code accesses the session private key from the user. The frontend code uses the key of the session wallet which is authorised to sign EIP-712 signature requests on behalf of the user’s wallet. In short, the frontend handles the signing for the user, removing the need for any pop ups from the wallet. The off-chain request is then sent to the backend server. Malicious intent restrictedIf a malicious party would ever obtain the session private key, their actions are extremely limited. They are unable to steal funds from the wallet, rendering an attack mostly useless since there is no financial gain available.The key can only be used to interact with the game contracts.It is not possible to transfer tokens out of the wallet.Placing wagers can only happen with ERC-20 bet tokens approved on the Forwarder contract.The total amount that can be wagered (volume) is limited to the amount the user has approved on the Forwarder contract.Note: Metamask sets Max to the user's balance and users get warned when approving infinite, leading to increased security.Betting against ~1% house edge does not lead to direct loss of funds; on the contrary, it can lead to profits.Losses do not end up in malicious hands, they fall into the bankroll.Native tokens are unavailable on Metaplay© and thus can never be accessed.In summary: with the key it is only possible to use approved ERC-20 bet tokens and place wagers against ~1% house edge limited to a total volume of the amount approved. A malicious party is unable to get their hands on any funds, meaning there is no incentive to steal the key.Backend (gas relayer)The backend server receives the user’s request. The backend verifies that the transaction does not fail if it gets executed and sends the transaction on-chain. Trusted forwarder (contract)On-chain, the signature and nonce are checked to make sure that the user signed the request to keep the user's wallet safe.The forwarder then sends the request forward, communicating with the recipient/target contracts (game contracts). Game contracts (recipient)The casino contracts underwent minimal changes. The most important change was finding out who is sending the transaction, because the Forwarder contract executes transactions on behalf of the user. This is done with the function function _msgSender(), which can be found on the Common.sol and game contracts. Forwarder extraThe forwarder contract keeps track of the user's "set and signed (immutable) gasLimit and Value sent" to convert those values to the ERC-20 fee token chosen by the user and collected from the user. This is also the reason an approval is needed for the fee token. The operator pays transaction fees and VRF fees, so fees need to be collected from the user to cover the cost from the operator.Architecture overviewFuture improvementsLowering gas costs by batching requests when there is a high number of requests;Especially on Arbitrum, by modifying the calldata so it uses less space on L1 and is therefor cheaper.Decentralising the operator (gas relayers);Subsidising bet fees;Gas fees: gasless transactionsVRF feesAllow approving without native token;Removing approvals for fee token through subsidising those fees;Batch pay upfront for transactions. Page: https://docs.zkasino.io/developer/contract-addresses Contract addresses | ZKasino DocumentationZKasino DocumentationWebsitedAppTwitterTelegramMoreWebsitedAppTwitterTelegramSearch...Ctrl + KWelcomeTokenomicsZKasino BridgeZKasino Chain TestnetZKasinoRoadmap and FAQResponsible GamingLive SupportIPFS hostingMainnet GuideOfficial LinksPlatformGlossaryBettingChains and Bet tokensSelf ExclusionDeveloperContract addressesAuditsInfrastructureVRF OracleArchitectureMetaplayProbability, Odds and House EdgeDicePlinkoVideo PokerSlotsMinesRock Paper ScissorsCoin FlipKelly-based bankroll managementChangelogGame contracts v2.1Game contracts v2.0Contracts v1.0Integrated VRFs (old)Testnet Guide (outdated)TestingBNB Chain private fee testingv2.1 private testnet WIPv2.0 public testnetv2.0 private testnetmulti-chain private mainnet with VRFv1.1 public testnetmulti-chain private testnet with VRFv1.0 public testnetwip v1.0 private testnetv2.1 public testnetPowered by GitBookOn this pageBankroll contractsGame contractsMetaplayDeveloperContract addressesBankroll contractsTypeUpgradeableChainAddressDiamond (Bankroll, main)Upgradeable UpgradeablePolygon Arbitrum0x51e99A0D09EeCa8d7EFEc3062AC024B6d0989959 0x51e99A0D09EeCa8d7EFEc3062AC024B6d0989959BankrollFacetImmutablePolygon